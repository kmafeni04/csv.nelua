require "io"

global csv = @record{}

local function trim_wspace(s: string)
  local _, str_seq = s:match("%s*(.+)%s*")
  return str_seq[1]
end

local function escape_pattern(s: string)
    local str = s:gsub("([%(%)%.%%%+%-%*%?%[%]%^%$])", "%%%1")
    return str
end

local function parse(content: string, delim: facultative(string), header: boolean): (boolean, sequence(hashmap(string, string)), string)
  local tbl: sequence(hashmap(string, string))

  ## if delim.type.is_niltype then
    local actual_delim = ","
  ## else
    local actual_delim = delim
  ## end

  -- Unique set of characters to avoid accidental new line swaps
  local NEW_LINE_SWAP <const> = "\\__n"

  -- Unique set of characters to avoid accidental delim swaps
  local DELIM_SWAP = "\\__;"
  if DELIM_SWAP == actual_delim then
    DELIM_SWAP = "\\__,"
  end
  for string in content:gmatch('%b""') do
    local find_start, find_end = content:find(escape_pattern(string))
    string = string:gsub("\n", NEW_LINE_SWAP)
    string = string:gsub("%" .. actual_delim, DELIM_SWAP)
    content = content:sub(1, find_start - 1) .. string .. content:sub(find_end + 1)
  end
  
  ## local function clean_col(col)
    #[col]# = trim_wspace(#[col]#)
    #[col]# = #[col]#:sub(1, # #[col]# - 1)
    #[col]# = #[col]#:gsub(NEW_LINE_SWAP, "\n")
    #[col]# = #[col]#:gsub(DELIM_SWAP, actual_delim)
    local col_match, col_seq = #[col]#:match('^"(.*)"$')
    if col_match then
      #[col]# = col_seq[1]
    end
    #[col]# = #[col]#:gsub('\\"', '"')
    #[col]# = #[col]#:gsub("\\'", "'")
    #[col]# = #[col]#:gsub("\\n", "\n")
    #[col]# = #[col]#:gsub("\\t", "\t")
    #[col]# = #[col]#:gsub("\\r", "\r")
    #[col]# = #[col]#:gsub("\\b", "\b")
    #[col]# = #[col]#:gsub("\\f", "\f")
    #[col]# = #[col]#:gsub("\\v", "\v")
    #[col]# = #[col]#:gsub("\\z", "\z")
    #[col]# = #[col]#:gsub("\\\\", "\\")
    #[col]# = #[col]#:gsub("\\0", "\0")
  ## end
  
  local headers: sequence(string)
  local LINE_MATCH = ("[^%s]*%s"):format(actual_delim, actual_delim)
  local line_no = 1
  for line in content:gmatch("[^\n]+") do
    line = line .. actual_delim
    local col_no = 1
    if header then
      if line_no == 1 then
        for col in line:gmatch(LINE_MATCH) do
          ## clean_col(col)
          if col == "" then
            return false, tbl, "Cannot have empty headers" 
          end
          headers:push(col)
        end
      end
    end
    local row: hashmap(string, string)
    for col in line:gmatch(LINE_MATCH) do
      ## clean_col(col)
      if header then
        if line_no ~= 1 then
          row[headers[col_no]] = col
        end
      else
        row["col" .. col_no] = col
      end
      col_no = col_no + 1
    end
    if header then
      if line_no ~= 1 then
        tbl:push(row)
      end
    else
      tbl:push(row)
    end
    line_no = line_no + 1
  end
  return true, tbl, ""
end

function csv.parse_file(file: string, delim: facultative(string), header: boolean): (boolean, sequence(hashmap(string, string)), string)
  local file_prog = io.open(file)
  if not file_prog:isopen() then
    return false, (@sequence(hashmap(string, string)))({}), ("Failed to open file: %s"):format(file)
  end
  local content = file_prog:read("a")
  return parse(content, delim, header)
end

function csv.parse_string(content: string, delim: facultative(string), header: boolean): (boolean, sequence(hashmap(string, string)), string)
  return parse(content, delim, header)
end

-- TODO: Handle empty fields better
function csv.encode(tbl: span(span(string)), delim: facultative(string)): (boolean, string, string)
  ## if delim.type.is_niltype then
    local actual_delim = ","
  ## else
    local actual_delim = delim
  ## end
  local sb: stringbuilder
  local row_length = #tbl[0]
  for _, row in ipairs(tbl) do 
    if row_length ~= #row then
      return false, "", "Rows must contain the same amount of entries"
    end 
    for _, v in pairs(row) do
      sb:write(v .. actual_delim)
    end
    -- Remove trailing comma
    sb:rollback(1)
    sb:write("\n")
  end
  -- Remove trailing new line
  sb:rollback(1)
  return true, sb:promote(), ""
end
