require "sequence"
require "os"
require "io"

require "libs.ansicolor"

##[[
  local lfs = require "lfs"

  local function get_files()
    local parent_dir, err = lfs.currentdir()
    assert(parent_dir, ("ERROR: %s"):format(err))

    local changed_dir, err = lfs.chdir("tests")
    assert(changed_dir, ("ERROR: %s"):format(err))
    
    local current_dir, err = lfs.currentdir()
    assert(current_dir, ("ERROR: %s"):format(err))


    local function loop_dir(dir, files)
      for file in lfs.dir(dir) do
        if file ~= ".." and file ~= "." then
          local f = dir .. "/" .. file
          local attr = lfs.attributes(f)
          if attr.mode == "directory" then
            loop_dir(f, files)
          else
            table.insert(files, dir .. "/" .. file)
          end
        end
      end
      return files
    end

    local files = loop_dir(current_dir, {})

    return files
  end
]]

local files: sequence(string) = #[get_files()]#

assert(next(files, 0), "Zero test files found")

local failed_tests: sequence(string)

for _, file in ipairs(files) do
  local ok = os.execute(("nelua %s"):format(file))
  if not ok then
    failed_tests:push(file)
  end
end

if next(failed_tests, 0) then
  for _, test in ipairs(failed_tests) do
    io.stderr:write(("%s Test: %s failed\n"):format(AnsiColor.new("[ERROR]"):Red():tostring(), test))
  end
  os.exit(1)
end

print(("%s All tests passed"):format(AnsiColor.new("[SUCCESS]"):Green():tostring()))
